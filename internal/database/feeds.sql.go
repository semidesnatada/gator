// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetched,
	)
	return i, err
}

const getFeedFromUrl = `-- name: GetFeedFromUrl :one
SELECT feeds.id as feed_id, feeds.url as feed_url, feeds.name as feed_name
FROM feeds
WHERE feeds.url = $1
`

type GetFeedFromUrlRow struct {
	FeedID   uuid.UUID
	FeedUrl  string
	FeedName string
}

func (q *Queries) GetFeedFromUrl(ctx context.Context, url string) (GetFeedFromUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFromUrl, url)
	var i GetFeedFromUrlRow
	err := row.Scan(&i.FeedID, &i.FeedUrl, &i.FeedName)
	return i, err
}

const getFeedID = `-- name: GetFeedID :one
SELECT id FROM feeds
WHERE name = $1
`

func (q *Queries) GetFeedID(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedID, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeedIDFromUrl = `-- name: GetFeedIDFromUrl :one
SELECT feeds.id as feed_id
FROM feeds
WHERE feeds.url = $1
`

func (q *Queries) GetFeedIDFromUrl(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedIDFromUrl, url)
	var feed_id uuid.UUID
	err := row.Scan(&feed_id)
	return feed_id, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name as feedname, feeds.url, users.name as username
FROM feeds INNER JOIN users 
ON feeds.user_id = users.id
`

type GetFeedsRow struct {
	Feedname string
	Url      string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Feedname, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched
FROM feeds
ORDER BY last_fetched ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetched,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds
SET last_fetched = $1, updated_at = $2
WHERE id = $3
`

type MarkFeedFetchedParams struct {
	LastFetched sql.NullTime
	UpdatedAt   time.Time
	ID          uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetched, arg.UpdatedAt, arg.ID)
	return err
}
